
dungeon.h,24
# define DUNGEON_H2,18

heap.c,1009
#undef min4,39
struct heap_node 6,51
  heap_node_t *next;next7,70
  heap_node_t *prev;prev8,91
  heap_node_t *parent;parent9,112
  heap_node_t *child;child10,135
  void *datum;datum11,157
  uint32_t degree;12,172
  uint32_t mark;13,191
#define splice_heap_node_lists(16,212
#define insert_heap_node_in_list(25,524
#define remove_heap_node_from_list(32,748
void print_heap_node(37,881
void print_heap(53,1203
void print_heap_node_list(70,1505
void heap_init(86,1704
void heap_node_delete(96,1940
void heap_delete(114,2244
heap_node_t *heap_insert(heap_insert125,2409
void *heap_peek_min(heap_peek_min145,2725
static void heap_link(150,2801
static void heap_consolidate(164,3123
void *heap_remove_min(heap_remove_min205,4056
int heap_combine(240,4590
static void heap_cut(269,5241
static void heap_cascading_cut(283,5522
int heap_decrease_key(297,5748
int heap_decrease_key_no_replace(311,5990
int32_t compare(335,6564
char *print_int(print_int340,6663
int main(349,6781

heap.h,245
# define HEAP_H2,15
typedef struct heap_node heap_node_t;11,114
typedef struct heap 13,153
  heap_node_t *min;min14,175
  uint32_t size;15,195
  int32_t (*compare)compare16,212
  void (*datum_delete)datum_delete17,269
} heap_t;18,301

macros.h,611
# define MACROS_H2,17
#  define dprintf(16,213
#  define dfprintf(17,256
#  define dprintf(19,320
#  define dfprintf(20,343
# define fieldwidth(23,382
# define exit(37,1201
# define fopen(42,1441
#  define malloc(76,3348
#  define calloc(92,4430
#  define strdup(107,5435
#  define free(117,6055
# define swap(125,6303
# define memswap(131,6415
# define structdup(137,6543
# define datacmp(144,6927
# define max2(153,7400
# define min2(160,7576
# define max 167,7752
# define min 168,7770
# define max3(170,7789
# define min3(171,7830
# define frand(173,7872
# define structdup(180,7984

rlg327.c,2082
# define rand_under(16,338
# define rand_range(20,481
typedef struct corridor_path 22,555
  heap_node_t *hn;hn23,586
  uint8_t pos[pos24,605
  uint8_t from[from25,623
  int32_t cost;28,771
} corridor_path_t;29,787
typedef enum dim 31,807
  dim_x,32,826
  dim_y,33,835
  num_dims34,844
} dim_t;35,855
typedef int16_t pair_t[pair_t37,865
#define DUNGEON_X 39,900
#define DUNGEON_Y 40,934
#define MIN_ROOMS 41,968
#define MAX_ROOMS 42,1001
#define ROOM_MIN_X 43,1034
#define ROOM_MIN_Y 44,1067
#define ROOM_MAX_X 45,1100
#define ROOM_MAX_Y 46,1134
#define SAVE_DIR 47,1167
#define DUNGEON_SAVE_FILE 48,1208
#define DUNGEON_SAVE_SEMANTIC 49,1249
#define DUNGEON_SAVE_VERSION 50,1289
#define mappair(52,1324
#define mapxy(53,1381
#define hardnesspair(54,1416
#define hardnessxy(55,1483
typedef enum __attribute__ ((__packed__)) terrain_type 57,1529
  ter_debug,58,1586
  ter_wall,59,1599
  ter_wall_immutable,60,1611
  ter_floor,61,1633
  ter_floor_room,62,1646
  ter_floor_hall,63,1664
} terrain_type_t;64,1682
typedef struct room 66,1701
  pair_t position;67,1723
  pair_t size;68,1742
  uint32_t connected;69,1757
} room_t;70,1779
typedef struct dungeon 72,1790
  uint32_t num_rooms;73,1815
  room_t *rooms;rooms74,1837
  terrain_type_t map[map75,1854
  uint8_t hardness[hardness84,2507
} dungeon_t;85,2549
static int32_t corridor_path_cmp(87,2563
static void dijkstra_corridor(93,2826
static int connect_two_rooms(199,7229
static int connect_rooms(217,7880
static int empty_dungeon(228,8053
static int place_rooms(247,8452
static int make_rooms(284,9639
int gen_dungeon(310,10293
void render_dungeon(336,10665
void delete_dungeon(364,11263
void init_dungeon(369,11320
int write_dungeon_map(374,11377
int write_rooms(387,11614
uint32_t calculate_dungeon_size(402,11976
int makedirectory(409,12210
int write_dungeon(444,12846
int read_dungeon_map(496,14072
int read_rooms(522,14780
int calculate_num_rooms(548,15493
int read_dungeon(556,15745
int read_pgm(631,17440
void usage(714,19529
int main(723,19682
